<?php

namespace App\AdminBundle\Repository;

/**
 * MatchsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchsRepository extends \Doctrine\ORM\EntityRepository {

    function getmatchjournee($id_poule, $journee) {
        $params = ['id_poule' => $id_poule, 'journee' => $journee];
        $query = $this->createQueryBuilder('m')
                        ->where('m.poule =:id_poule')
                        ->andWhere('m.journee =:journee')
                        ->setParameters($params)
                        ->getQuery()->getArrayResult();
        return $query;
    }

    function getmatchbyid($id) {
        return $query = $this->createQueryBuilder('m')
                        ->where('m.id =:id')
                        ->setParameter('id', $id)
                        ->getQuery()->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    function getMatchdemifinal($id) {
        return $query = $this->createQueryBuilder('m')
                        ->leftJoin('m.tournois', 't')
                        ->where('t.id=:id')
                        ->andWhere("m.etapematch='demi_final'")
                        ->setParameter('id', $id)
                        ->getQuery()->getArrayResult();
    }

    function getmatchclassment($id) {
        return $query = $this->createQueryBuilder('m')
                        ->leftJoin('m.tournois', 't')
                        ->where('t.id=:id')
                        ->andWhere("m.etapematch='classment'")
                        ->setParameter('id', $id)
                        ->getQuery()->getArrayResult();
    }

    public function getdemifinal($id) {
        return $query = $this->createQueryBuilder('m')
                        ->where("m.etapematch='demi_final'")
                        ->andWhere('m.tournois=:id')
                        ->setParameter('id', $id)
                        ->getQuery()->getArrayResult();
    }

    public function getScorematchdemifinal($id) {
        $data = $this->getdemifinal($id);
        foreach ($data as $k => $v) {
            $score = $this->_em->getRepository('AppAdminBundle:Score')
                            ->createQueryBuilder('s')
                            ->where('s.match_id=' . $v['id'] . '')
                            ->getQuery()->getArrayResult();
            $array[$k] = array('id' => $v['id'], 'equipe1' => $v['equipe1'], 'equipe2' => $v['equipe2'],
                'statut' => $v['statut'], 'etapematch' => $v['etapematch'], 'terminer' => $v['terminer'],
                'score' => $score
                    );
        }
        return $array;
    }

    public function getmatchbyidtournoi($id) {
        return $query = $this->createQueryBuilder('m')
                        ->leftJoin('m.tournois', 't')
                        ->where('t.id=:id')
                        ->andWhere("m.etapematch='final'")
                        ->setParameter('id', $id)
                        ->getQuery()->getArrayResult();
    }
    public function getfinal($id)
    {
        return $query = $this->createQueryBuilder('m')
                ->where("m.etapematch='final'")
                ->andWhere("m.tournois=:id")
                ->setParameter('id', $id)
                ->getQuery()->getArrayResult();
    }

    public function getScorematchfinal($id) {
        $data = $this->getfinal($id);
        //debug($data);die;
        foreach ($data as $k => $v) {
            $score = $this->_em->getRepository('AppAdminBundle:Score')
                            ->createQueryBuilder('s')
                            ->where('s.match_id=' . $v['id'] . '')
                            ->getQuery()->getArrayResult();
            
            $array[$k] = array('id' => $v['id'], 'equipe1' => $v['equipe1'], 'equipe2' => $v['equipe2'],
                'statut' => $v['statut'], 'etapematch' => $v['etapematch'], 'terminer' => $v['terminer'],
                'score' => $score
                    );
        }
        //debug($array); die;
        return $array;
    }
    
    
    public function getallbyequipe($equipe)
    {
        $query = $this->createQueryBuilder('m')
                ->where('m.equipe1=:equipe')
                ->orWhere('m.equipe2=:equipe')
                ->setParameter('equipe', $equipe)
                ->getQuery()->getArrayResult();
        return $query;
    }
}
